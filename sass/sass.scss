@use 'sass:math';
@use '../sass/transfer';
@include transfer.c-mixin();

/* 
// @use与@import
1.use引用多次不会重复引入，import会
2.use是模块化思想 引入文件都是一个模块，默认文件名是模块名 as XX 可改
3. -或_开头的变量可作为私有变量
4. !default默认值可用with(?)来改默认值
5.引用多个文件，use的变量名不会覆盖，可用模块名访问，而import会被覆盖.

// @forward相当于js中的export导出功能

// 三代编译器：dart-sass(最新) 弃用：node-sass ruby-sass
*/

// test
$basecolor: skyblue;

p {
  color: $basecolor;
  display: flex;
  //transform: matrix3d(0, 0, 0);

  font: {
    size: 20px;
    weight: bold;
  }
}

// 变量
$color: #f00;
$background-color: #fff;
$border-color: #0f0;
$black-mode: false;
$var: null;
$padding-parms: 10px 6px 10px 6px;
$color-map: (
  color1: #111,
  color2: #222,
  color3: #333,
);
$font: (
  key1: 'sdufihue',
  key2: 'sdbfiebif',
);

.container {
  color: $color;
  $border-color: #333 !global;
  background-color: $background-color;
}

.p {
  border-color: $border-color;
}

$color1: skyblue;
$color1: #666 !default;

// 导入
@import 'foo';

.foo {
  color: $color;
}

// 混合指令(Mixin directives)
@mixin foo1 {
  padding: 10px 0;
}

.mixin1 {
  @include foo1;
}

@mixin foo2 {
  .foo2 {
    padding: 10px 0;
  }
}

.mixin2 {
  @include foo2;
}

@mixin foo3($top: 0, $right: 0, $bottom: 0, $left: 0) {
  padding: $top, $right, $bottom, $left;
}

.mixin3 {
  @include foo3(0, 10px, 0, 10px);
  @include foo3($left: 100px, $right: 50px);
}

@mixin foo4($to, $gradients...) {
  // background-color: nth($list: $gradients, $n: 1);
  background-color: nth($gradients, 2);
  background-image: linear-gradient($to, $gradients);
}

.mixin4 {
  @include foo4(to right, red, green, blue);
}

// 继承  %占位符作用:不希望被编译到css中
%default {
  width: 200px;
  height: 200px;
  border: 1px solid #666;
  border-radius: 25%;
  opacity: 0.5;
  background-color: white;
}

.success {
  @extend %default;
  background-color: blue;
}

.alert {
  @extend %default;
  background-color: yellow;
}

.warning {
  @extend %default;
  background-color: orange;
}

.danger {
  @extend %default;
  background-color: red;
}

// sass运算符
// @if
$o1: false;
$wight: 100;
$height: 20;

.div1 {
  @if $wight >100 and $height >20 {
    background-color: #0f0;
  } @else {
    background-color: #111;
  }

  @if $o1 {
    display: block;
  } @else {
    display: none;
  }
}

// + - * /(除法特殊,需要加括号 或者函数变量值 或有运算符在旁边) %
// 运算时  单位不相同 可以转化则转 不可转编译报错
$width: 100;
$height: 100px;

.opration {
  width: 10px + 1pt;
  height: math.div(10px, 2);
  // height: (10px / 2);
  // height: $height / 2;
  //content: 'foo1 ' + foo2;
  //content: foo1 + 'foo2';
}

// 插值语句#{}
$author: 'peter';
$name1: 'font';
$color1: color;
$font-size: 300px;
$line-height: 100px;

/* 
  作者：#{$author} 
  ps:单号注释不会被保留下来
*/
.insert {
  // font: $font-size/$line-height "微软雅黑"; //参数出现运算
  #{$name1}: #{$font-size}/#{$line-height} '微软雅黑'; //所以引入插值
  #{$color1}: red;
}

/* 常见函数见文档：https://sass-lang.com/documentation/modules/ */

/* 
  // @for to/through
  // 不包含后置数
 */
@for $i1 from 1 to 3 {
  #p#{$i1} {
    background-color: #0f0;
  }
}

/* // 包含后置数 */
@for $i1 from 1 through 3 {
  #p#{$i1} {
    background-color: #0f0;
  }
}

// @each in 遍历数组
$color-list: red blue yellow skyblue grey;

@each $color in $color-list {
  $index: index($color-list, $color);

  #span#{$index} {
    background-color: $color;
  }
}

// @while
$cloumn: 6;

@while $cloumn >0 {
  .col-sm-#{$cloumn} {
    width: math.div($cloumn, 6) * 100;
  }

  $cloumn: $cloumn - 1;
}

// @function

@function fun1($to, $gradients...) {
  @return linear-gradient($to, $gradients);
}

@mixin mixin5($to, $gradients...) {
  // background-color: nth($list: $gradients, $n: 1);
  background-color: nth($gradients, 2);
  background-image: fun1($to, $gradients);
}

.demo {
  @include mixin5(to right, red, blue, yellow);
}

$list: 100px 200px 300px;

span {
  //width: min($list...);
}

// 三元条件函数if(没有@) 相当于三元运算符
$flag: false;

.p1 {
  color: if($flag, #fff, #000);
}

// @at-root  作用：跳出嵌套 应用场景：logo在header里面然后加跳出嵌套
.p1 {
  color: #000;

  @at-root .p2 {
    color: #fff;

    .p3 {
      color: #f00;
    }
  }
}
